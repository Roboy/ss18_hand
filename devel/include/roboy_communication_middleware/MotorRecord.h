// Generated by gencpp from file roboy_communication_middleware/MotorRecord.msg
// DO NOT EDIT!


#ifndef ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_MOTORRECORD_H
#define ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_MOTORRECORD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_communication_middleware
{
template <class ContainerAllocator>
struct MotorRecord_
{
  typedef MotorRecord_<ContainerAllocator> Type;

  MotorRecord_()
    : id(0)
    , recordTime(0.0)
    , samplingTime(0)
    , control_mode(0)
    , motor0()
    , motor1()
    , motor2()
    , motor3()
    , motor4()
    , motor5()
    , motor6()
    , motor7()
    , motor8()
    , motor9()
    , motor10()
    , motor11()
    , motor12()
    , motor13()  {
    }
  MotorRecord_(const ContainerAllocator& _alloc)
    : id(0)
    , recordTime(0.0)
    , samplingTime(0)
    , control_mode(0)
    , motor0(_alloc)
    , motor1(_alloc)
    , motor2(_alloc)
    , motor3(_alloc)
    , motor4(_alloc)
    , motor5(_alloc)
    , motor6(_alloc)
    , motor7(_alloc)
    , motor8(_alloc)
    , motor9(_alloc)
    , motor10(_alloc)
    , motor11(_alloc)
    , motor12(_alloc)
    , motor13(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef float _recordTime_type;
  _recordTime_type recordTime;

   typedef int32_t _samplingTime_type;
  _samplingTime_type samplingTime;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor0_type;
  _motor0_type motor0;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor1_type;
  _motor1_type motor1;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor2_type;
  _motor2_type motor2;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor3_type;
  _motor3_type motor3;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor4_type;
  _motor4_type motor4;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor5_type;
  _motor5_type motor5;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor6_type;
  _motor6_type motor6;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor7_type;
  _motor7_type motor7;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor8_type;
  _motor8_type motor8;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor9_type;
  _motor9_type motor9;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor10_type;
  _motor10_type motor10;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor11_type;
  _motor11_type motor11;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor12_type;
  _motor12_type motor12;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor13_type;
  _motor13_type motor13;





  typedef boost::shared_ptr< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> const> ConstPtr;

}; // struct MotorRecord_

typedef ::roboy_communication_middleware::MotorRecord_<std::allocator<void> > MotorRecord;

typedef boost::shared_ptr< ::roboy_communication_middleware::MotorRecord > MotorRecordPtr;
typedef boost::shared_ptr< ::roboy_communication_middleware::MotorRecord const> MotorRecordConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboy_communication_middleware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roboy_communication_middleware': ['/home/barisyazici/ss18_hand/src/roboy_communication/middleware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fdc40ac028fa6d92b5ce4d22fd304528";
  }

  static const char* value(const ::roboy_communication_middleware::MotorRecord_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfdc40ac028fa6d92ULL;
  static const uint64_t static_value2 = 0xb5ce4d22fd304528ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_communication_middleware/MotorRecord";
  }

  static const char* value(const ::roboy_communication_middleware::MotorRecord_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n\
float32 recordTime\n\
int32 samplingTime\n\
uint8 control_mode\n\
int32[] motor0\n\
int32[] motor1\n\
int32[] motor2\n\
int32[] motor3\n\
int32[] motor4\n\
int32[] motor5\n\
int32[] motor6\n\
int32[] motor7\n\
int32[] motor8\n\
int32[] motor9\n\
int32[] motor10\n\
int32[] motor11\n\
int32[] motor12\n\
int32[] motor13\n\
";
  }

  static const char* value(const ::roboy_communication_middleware::MotorRecord_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.recordTime);
      stream.next(m.samplingTime);
      stream.next(m.control_mode);
      stream.next(m.motor0);
      stream.next(m.motor1);
      stream.next(m.motor2);
      stream.next(m.motor3);
      stream.next(m.motor4);
      stream.next(m.motor5);
      stream.next(m.motor6);
      stream.next(m.motor7);
      stream.next(m.motor8);
      stream.next(m.motor9);
      stream.next(m.motor10);
      stream.next(m.motor11);
      stream.next(m.motor12);
      stream.next(m.motor13);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorRecord_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_communication_middleware::MotorRecord_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_communication_middleware::MotorRecord_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "recordTime: ";
    Printer<float>::stream(s, indent + "  ", v.recordTime);
    s << indent << "samplingTime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.samplingTime);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "motor0[]" << std::endl;
    for (size_t i = 0; i < v.motor0.size(); ++i)
    {
      s << indent << "  motor0[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor0[i]);
    }
    s << indent << "motor1[]" << std::endl;
    for (size_t i = 0; i < v.motor1.size(); ++i)
    {
      s << indent << "  motor1[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor1[i]);
    }
    s << indent << "motor2[]" << std::endl;
    for (size_t i = 0; i < v.motor2.size(); ++i)
    {
      s << indent << "  motor2[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor2[i]);
    }
    s << indent << "motor3[]" << std::endl;
    for (size_t i = 0; i < v.motor3.size(); ++i)
    {
      s << indent << "  motor3[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor3[i]);
    }
    s << indent << "motor4[]" << std::endl;
    for (size_t i = 0; i < v.motor4.size(); ++i)
    {
      s << indent << "  motor4[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor4[i]);
    }
    s << indent << "motor5[]" << std::endl;
    for (size_t i = 0; i < v.motor5.size(); ++i)
    {
      s << indent << "  motor5[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor5[i]);
    }
    s << indent << "motor6[]" << std::endl;
    for (size_t i = 0; i < v.motor6.size(); ++i)
    {
      s << indent << "  motor6[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor6[i]);
    }
    s << indent << "motor7[]" << std::endl;
    for (size_t i = 0; i < v.motor7.size(); ++i)
    {
      s << indent << "  motor7[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor7[i]);
    }
    s << indent << "motor8[]" << std::endl;
    for (size_t i = 0; i < v.motor8.size(); ++i)
    {
      s << indent << "  motor8[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor8[i]);
    }
    s << indent << "motor9[]" << std::endl;
    for (size_t i = 0; i < v.motor9.size(); ++i)
    {
      s << indent << "  motor9[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor9[i]);
    }
    s << indent << "motor10[]" << std::endl;
    for (size_t i = 0; i < v.motor10.size(); ++i)
    {
      s << indent << "  motor10[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor10[i]);
    }
    s << indent << "motor11[]" << std::endl;
    for (size_t i = 0; i < v.motor11.size(); ++i)
    {
      s << indent << "  motor11[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor11[i]);
    }
    s << indent << "motor12[]" << std::endl;
    for (size_t i = 0; i < v.motor12.size(); ++i)
    {
      s << indent << "  motor12[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor12[i]);
    }
    s << indent << "motor13[]" << std::endl;
    for (size_t i = 0; i < v.motor13.size(); ++i)
    {
      s << indent << "  motor13[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor13[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_MOTORRECORD_H
