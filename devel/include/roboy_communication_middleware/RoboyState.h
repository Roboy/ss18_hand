// Generated by gencpp from file roboy_communication_middleware/RoboyState.msg
// DO NOT EDIT!


#ifndef ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_ROBOYSTATE_H
#define ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_ROBOYSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_communication_middleware
{
template <class ContainerAllocator>
struct RoboyState_
{
  typedef RoboyState_<ContainerAllocator> Type;

  RoboyState_()
    : setPoint()
    , actuatorPos()
    , actuatorVel()
    , tendonDisplacement()
    , actuatorCurrent()  {
    }
  RoboyState_(const ContainerAllocator& _alloc)
    : setPoint(_alloc)
    , actuatorPos(_alloc)
    , actuatorVel(_alloc)
    , tendonDisplacement(_alloc)
    , actuatorCurrent(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _setPoint_type;
  _setPoint_type setPoint;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _actuatorPos_type;
  _actuatorPos_type actuatorPos;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _actuatorVel_type;
  _actuatorVel_type actuatorVel;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tendonDisplacement_type;
  _tendonDisplacement_type tendonDisplacement;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _actuatorCurrent_type;
  _actuatorCurrent_type actuatorCurrent;





  typedef boost::shared_ptr< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> const> ConstPtr;

}; // struct RoboyState_

typedef ::roboy_communication_middleware::RoboyState_<std::allocator<void> > RoboyState;

typedef boost::shared_ptr< ::roboy_communication_middleware::RoboyState > RoboyStatePtr;
typedef boost::shared_ptr< ::roboy_communication_middleware::RoboyState const> RoboyStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_communication_middleware::RoboyState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboy_communication_middleware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roboy_communication_middleware': ['/home/barisyazici/ss18_hand/src/roboy_communication/middleware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a564b9aee3211a3963e685c6ed14e5e1";
  }

  static const char* value(const ::roboy_communication_middleware::RoboyState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa564b9aee3211a39ULL;
  static const uint64_t static_value2 = 0x63e685c6ed14e5e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_communication_middleware/RoboyState";
  }

  static const char* value(const ::roboy_communication_middleware::RoboyState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] setPoint\n\
float32[] actuatorPos\n\
float32[] actuatorVel\n\
float32[] tendonDisplacement\n\
float32[] actuatorCurrent\n\
";
  }

  static const char* value(const ::roboy_communication_middleware::RoboyState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.setPoint);
      stream.next(m.actuatorPos);
      stream.next(m.actuatorVel);
      stream.next(m.tendonDisplacement);
      stream.next(m.actuatorCurrent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoboyState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_communication_middleware::RoboyState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_communication_middleware::RoboyState_<ContainerAllocator>& v)
  {
    s << indent << "setPoint[]" << std::endl;
    for (size_t i = 0; i < v.setPoint.size(); ++i)
    {
      s << indent << "  setPoint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.setPoint[i]);
    }
    s << indent << "actuatorPos[]" << std::endl;
    for (size_t i = 0; i < v.actuatorPos.size(); ++i)
    {
      s << indent << "  actuatorPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.actuatorPos[i]);
    }
    s << indent << "actuatorVel[]" << std::endl;
    for (size_t i = 0; i < v.actuatorVel.size(); ++i)
    {
      s << indent << "  actuatorVel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.actuatorVel[i]);
    }
    s << indent << "tendonDisplacement[]" << std::endl;
    for (size_t i = 0; i < v.tendonDisplacement.size(); ++i)
    {
      s << indent << "  tendonDisplacement[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tendonDisplacement[i]);
    }
    s << indent << "actuatorCurrent[]" << std::endl;
    for (size_t i = 0; i < v.actuatorCurrent.size(); ++i)
    {
      s << indent << "  actuatorCurrent[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.actuatorCurrent[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_ROBOYSTATE_H
