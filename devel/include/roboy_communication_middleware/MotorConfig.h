// Generated by gencpp from file roboy_communication_middleware/MotorConfig.msg
// DO NOT EDIT!


#ifndef ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_MOTORCONFIG_H
#define ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_MOTORCONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_communication_middleware
{
template <class ContainerAllocator>
struct MotorConfig_
{
  typedef MotorConfig_<ContainerAllocator> Type;

  MotorConfig_()
    : id(0)
    , motors()
    , control_mode()
    , outputPosMax()
    , outputNegMax()
    , spPosMax()
    , spNegMax()
    , Kp()
    , Ki()
    , Kd()
    , forwardGain()
    , deadBand()
    , IntegralPosMax()
    , IntegralNegMax()  {
    }
  MotorConfig_(const ContainerAllocator& _alloc)
    : id(0)
    , motors(_alloc)
    , control_mode(_alloc)
    , outputPosMax(_alloc)
    , outputNegMax(_alloc)
    , spPosMax(_alloc)
    , spNegMax(_alloc)
    , Kp(_alloc)
    , Ki(_alloc)
    , Kd(_alloc)
    , forwardGain(_alloc)
    , deadBand(_alloc)
    , IntegralPosMax(_alloc)
    , IntegralNegMax(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _motors_type;
  _motors_type motors;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _control_mode_type;
  _control_mode_type control_mode;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _outputPosMax_type;
  _outputPosMax_type outputPosMax;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _outputNegMax_type;
  _outputNegMax_type outputNegMax;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _spPosMax_type;
  _spPosMax_type spPosMax;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _spNegMax_type;
  _spNegMax_type spNegMax;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _Kp_type;
  _Kp_type Kp;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _Ki_type;
  _Ki_type Ki;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _Kd_type;
  _Kd_type Kd;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _forwardGain_type;
  _forwardGain_type forwardGain;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _deadBand_type;
  _deadBand_type deadBand;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _IntegralPosMax_type;
  _IntegralPosMax_type IntegralPosMax;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _IntegralNegMax_type;
  _IntegralNegMax_type IntegralNegMax;





  typedef boost::shared_ptr< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> const> ConstPtr;

}; // struct MotorConfig_

typedef ::roboy_communication_middleware::MotorConfig_<std::allocator<void> > MotorConfig;

typedef boost::shared_ptr< ::roboy_communication_middleware::MotorConfig > MotorConfigPtr;
typedef boost::shared_ptr< ::roboy_communication_middleware::MotorConfig const> MotorConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboy_communication_middleware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roboy_communication_middleware': ['/home/barisyazici/ss18_hand/src/roboy_communication/middleware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "550fcb9e4abb4b0f030e3417615fc81e";
  }

  static const char* value(const ::roboy_communication_middleware::MotorConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x550fcb9e4abb4b0fULL;
  static const uint64_t static_value2 = 0x030e3417615fc81eULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_communication_middleware/MotorConfig";
  }

  static const char* value(const ::roboy_communication_middleware::MotorConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
uint8[] motors\n\
uint8[] control_mode\n\
int32[] outputPosMax\n\
int32[] outputNegMax\n\
int32[] spPosMax\n\
int32[] spNegMax\n\
uint16[] Kp\n\
uint16[] Ki\n\
uint16[] Kd\n\
uint16[] forwardGain\n\
uint16[] deadBand\n\
int32[] IntegralPosMax\n\
int32[] IntegralNegMax\n\
";
  }

  static const char* value(const ::roboy_communication_middleware::MotorConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.motors);
      stream.next(m.control_mode);
      stream.next(m.outputPosMax);
      stream.next(m.outputNegMax);
      stream.next(m.spPosMax);
      stream.next(m.spNegMax);
      stream.next(m.Kp);
      stream.next(m.Ki);
      stream.next(m.Kd);
      stream.next(m.forwardGain);
      stream.next(m.deadBand);
      stream.next(m.IntegralPosMax);
      stream.next(m.IntegralNegMax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_communication_middleware::MotorConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_communication_middleware::MotorConfig_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "motors[]" << std::endl;
    for (size_t i = 0; i < v.motors.size(); ++i)
    {
      s << indent << "  motors[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.motors[i]);
    }
    s << indent << "control_mode[]" << std::endl;
    for (size_t i = 0; i < v.control_mode.size(); ++i)
    {
      s << indent << "  control_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.control_mode[i]);
    }
    s << indent << "outputPosMax[]" << std::endl;
    for (size_t i = 0; i < v.outputPosMax.size(); ++i)
    {
      s << indent << "  outputPosMax[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.outputPosMax[i]);
    }
    s << indent << "outputNegMax[]" << std::endl;
    for (size_t i = 0; i < v.outputNegMax.size(); ++i)
    {
      s << indent << "  outputNegMax[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.outputNegMax[i]);
    }
    s << indent << "spPosMax[]" << std::endl;
    for (size_t i = 0; i < v.spPosMax.size(); ++i)
    {
      s << indent << "  spPosMax[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.spPosMax[i]);
    }
    s << indent << "spNegMax[]" << std::endl;
    for (size_t i = 0; i < v.spNegMax.size(); ++i)
    {
      s << indent << "  spNegMax[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.spNegMax[i]);
    }
    s << indent << "Kp[]" << std::endl;
    for (size_t i = 0; i < v.Kp.size(); ++i)
    {
      s << indent << "  Kp[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.Kp[i]);
    }
    s << indent << "Ki[]" << std::endl;
    for (size_t i = 0; i < v.Ki.size(); ++i)
    {
      s << indent << "  Ki[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.Ki[i]);
    }
    s << indent << "Kd[]" << std::endl;
    for (size_t i = 0; i < v.Kd.size(); ++i)
    {
      s << indent << "  Kd[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.Kd[i]);
    }
    s << indent << "forwardGain[]" << std::endl;
    for (size_t i = 0; i < v.forwardGain.size(); ++i)
    {
      s << indent << "  forwardGain[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.forwardGain[i]);
    }
    s << indent << "deadBand[]" << std::endl;
    for (size_t i = 0; i < v.deadBand.size(); ++i)
    {
      s << indent << "  deadBand[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.deadBand[i]);
    }
    s << indent << "IntegralPosMax[]" << std::endl;
    for (size_t i = 0; i < v.IntegralPosMax.size(); ++i)
    {
      s << indent << "  IntegralPosMax[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.IntegralPosMax[i]);
    }
    s << indent << "IntegralNegMax[]" << std::endl;
    for (size_t i = 0; i < v.IntegralNegMax.size(); ++i)
    {
      s << indent << "  IntegralNegMax[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.IntegralNegMax[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_COMMUNICATION_MIDDLEWARE_MESSAGE_MOTORCONFIG_H
