// Generated by gencpp from file roboy_communication_cognition/QualityOfTonesResponse.msg
// DO NOT EDIT!


#ifndef ROBOY_COMMUNICATION_COGNITION_MESSAGE_QUALITYOFTONESRESPONSE_H
#define ROBOY_COMMUNICATION_COGNITION_MESSAGE_QUALITYOFTONESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_communication_cognition
{
template <class ContainerAllocator>
struct QualityOfTonesResponse_
{
  typedef QualityOfTonesResponse_<ContainerAllocator> Type;

  QualityOfTonesResponse_()
    : quality()
    , purity()
    , directionZ(0.0)
    , directionY()
    , hitPin(false)  {
    }
  QualityOfTonesResponse_(const ContainerAllocator& _alloc)
    : quality(_alloc)
    , purity(_alloc)
    , directionZ(0.0)
    , directionY(_alloc)
    , hitPin(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _quality_type;
  _quality_type quality;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _purity_type;
  _purity_type purity;

   typedef float _directionZ_type;
  _directionZ_type directionZ;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _directionY_type;
  _directionY_type directionY;

   typedef uint8_t _hitPin_type;
  _hitPin_type hitPin;





  typedef boost::shared_ptr< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct QualityOfTonesResponse_

typedef ::roboy_communication_cognition::QualityOfTonesResponse_<std::allocator<void> > QualityOfTonesResponse;

typedef boost::shared_ptr< ::roboy_communication_cognition::QualityOfTonesResponse > QualityOfTonesResponsePtr;
typedef boost::shared_ptr< ::roboy_communication_cognition::QualityOfTonesResponse const> QualityOfTonesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboy_communication_cognition

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'roboy_communication_cognition': ['/home/barisyazici/ss18_hand/src/roboy_communication/roboy_communication_cognition/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4e7a974e4548fd927305c07206fbfc6";
  }

  static const char* value(const ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4e7a974e4548fd9ULL;
  static const uint64_t static_value2 = 0x27305c07206fbfc6ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_communication_cognition/QualityOfTonesResponse";
  }

  static const char* value(const ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] quality\n\
float32[] purity\n\
float32 directionZ\n\
float32[] directionY\n\
bool hitPin\n\
\n\
";
  }

  static const char* value(const ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.quality);
      stream.next(m.purity);
      stream.next(m.directionZ);
      stream.next(m.directionY);
      stream.next(m.hitPin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QualityOfTonesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_communication_cognition::QualityOfTonesResponse_<ContainerAllocator>& v)
  {
    s << indent << "quality[]" << std::endl;
    for (size_t i = 0; i < v.quality.size(); ++i)
    {
      s << indent << "  quality[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quality[i]);
    }
    s << indent << "purity[]" << std::endl;
    for (size_t i = 0; i < v.purity.size(); ++i)
    {
      s << indent << "  purity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.purity[i]);
    }
    s << indent << "directionZ: ";
    Printer<float>::stream(s, indent + "  ", v.directionZ);
    s << indent << "directionY[]" << std::endl;
    for (size_t i = 0; i < v.directionY.size(); ++i)
    {
      s << indent << "  directionY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.directionY[i]);
    }
    s << indent << "hitPin: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hitPin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_COMMUNICATION_COGNITION_MESSAGE_QUALITYOFTONESRESPONSE_H
