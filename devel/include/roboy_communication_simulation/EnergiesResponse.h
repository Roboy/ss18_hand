// Generated by gencpp from file roboy_communication_simulation/EnergiesResponse.msg
// DO NOT EDIT!


#ifndef ROBOY_COMMUNICATION_SIMULATION_MESSAGE_ENERGIESRESPONSE_H
#define ROBOY_COMMUNICATION_SIMULATION_MESSAGE_ENERGIESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_communication_simulation
{
template <class ContainerAllocator>
struct EnergiesResponse_
{
  typedef EnergiesResponse_<ContainerAllocator> Type;

  EnergiesResponse_()
    : E_speed(0.0)
    , E_headvel(0.0)
    , E_headori(0.0)
    , E_slide(0.0)
    , E_effort(0.0)  {
    }
  EnergiesResponse_(const ContainerAllocator& _alloc)
    : E_speed(0.0)
    , E_headvel(0.0)
    , E_headori(0.0)
    , E_slide(0.0)
    , E_effort(0.0)  {
  (void)_alloc;
    }



   typedef double _E_speed_type;
  _E_speed_type E_speed;

   typedef double _E_headvel_type;
  _E_headvel_type E_headvel;

   typedef double _E_headori_type;
  _E_headori_type E_headori;

   typedef double _E_slide_type;
  _E_slide_type E_slide;

   typedef double _E_effort_type;
  _E_effort_type E_effort;





  typedef boost::shared_ptr< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EnergiesResponse_

typedef ::roboy_communication_simulation::EnergiesResponse_<std::allocator<void> > EnergiesResponse;

typedef boost::shared_ptr< ::roboy_communication_simulation::EnergiesResponse > EnergiesResponsePtr;
typedef boost::shared_ptr< ::roboy_communication_simulation::EnergiesResponse const> EnergiesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboy_communication_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'roboy_communication_simulation': ['/home/barisyazici/ss18_hand/src/roboy_communication/simulation/msgs'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a6c57e829cf6beb9c3918f4ad1ffcad";
  }

  static const char* value(const ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a6c57e829cf6bebULL;
  static const uint64_t static_value2 = 0x9c3918f4ad1ffcadULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_communication_simulation/EnergiesResponse";
  }

  static const char* value(const ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 E_speed\n\
float64 E_headvel\n\
float64 E_headori\n\
float64 E_slide\n\
float64 E_effort\n\
";
  }

  static const char* value(const ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.E_speed);
      stream.next(m.E_headvel);
      stream.next(m.E_headori);
      stream.next(m.E_slide);
      stream.next(m.E_effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EnergiesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_communication_simulation::EnergiesResponse_<ContainerAllocator>& v)
  {
    s << indent << "E_speed: ";
    Printer<double>::stream(s, indent + "  ", v.E_speed);
    s << indent << "E_headvel: ";
    Printer<double>::stream(s, indent + "  ", v.E_headvel);
    s << indent << "E_headori: ";
    Printer<double>::stream(s, indent + "  ", v.E_headori);
    s << indent << "E_slide: ";
    Printer<double>::stream(s, indent + "  ", v.E_slide);
    s << indent << "E_effort: ";
    Printer<double>::stream(s, indent + "  ", v.E_effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_COMMUNICATION_SIMULATION_MESSAGE_ENERGIESRESPONSE_H
