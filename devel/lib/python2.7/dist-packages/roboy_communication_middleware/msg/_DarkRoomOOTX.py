# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/DarkRoomOOTX.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DarkRoomOOTX(genpy.Message):
  _md5sum = "6375d27b5383e96f6ed61b6d30596a00"
  _type = "roboy_communication_middleware/DarkRoomOOTX"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 lighthouse
uint16 fw_version
uint32 ID
float32 fcal_0_phase
float32 fcal_1_phase
float32 fcal_0_tilt
float32 fcal_1_tilt
uint8 unlock_count
uint8 hw_version
float32 fcal_0_curve
float32 fcal_1_curve
float32 accel_dir_x
float32 accel_dir_y
float32 accel_dir_z
float32 fcal_0_gibphase
float32 fcal_1_gibphase
float32 fcal_0_gibmag
float32 fcal_1_gibmag
uint8 mode
uint8 faults
uint32 crc32"""
  __slots__ = ['lighthouse','fw_version','ID','fcal_0_phase','fcal_1_phase','fcal_0_tilt','fcal_1_tilt','unlock_count','hw_version','fcal_0_curve','fcal_1_curve','accel_dir_x','accel_dir_y','accel_dir_z','fcal_0_gibphase','fcal_1_gibphase','fcal_0_gibmag','fcal_1_gibmag','mode','faults','crc32']
  _slot_types = ['int32','uint16','uint32','float32','float32','float32','float32','uint8','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lighthouse,fw_version,ID,fcal_0_phase,fcal_1_phase,fcal_0_tilt,fcal_1_tilt,unlock_count,hw_version,fcal_0_curve,fcal_1_curve,accel_dir_x,accel_dir_y,accel_dir_z,fcal_0_gibphase,fcal_1_gibphase,fcal_0_gibmag,fcal_1_gibmag,mode,faults,crc32

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DarkRoomOOTX, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lighthouse is None:
        self.lighthouse = 0
      if self.fw_version is None:
        self.fw_version = 0
      if self.ID is None:
        self.ID = 0
      if self.fcal_0_phase is None:
        self.fcal_0_phase = 0.
      if self.fcal_1_phase is None:
        self.fcal_1_phase = 0.
      if self.fcal_0_tilt is None:
        self.fcal_0_tilt = 0.
      if self.fcal_1_tilt is None:
        self.fcal_1_tilt = 0.
      if self.unlock_count is None:
        self.unlock_count = 0
      if self.hw_version is None:
        self.hw_version = 0
      if self.fcal_0_curve is None:
        self.fcal_0_curve = 0.
      if self.fcal_1_curve is None:
        self.fcal_1_curve = 0.
      if self.accel_dir_x is None:
        self.accel_dir_x = 0.
      if self.accel_dir_y is None:
        self.accel_dir_y = 0.
      if self.accel_dir_z is None:
        self.accel_dir_z = 0.
      if self.fcal_0_gibphase is None:
        self.fcal_0_gibphase = 0.
      if self.fcal_1_gibphase is None:
        self.fcal_1_gibphase = 0.
      if self.fcal_0_gibmag is None:
        self.fcal_0_gibmag = 0.
      if self.fcal_1_gibmag is None:
        self.fcal_1_gibmag = 0.
      if self.mode is None:
        self.mode = 0
      if self.faults is None:
        self.faults = 0
      if self.crc32 is None:
        self.crc32 = 0
    else:
      self.lighthouse = 0
      self.fw_version = 0
      self.ID = 0
      self.fcal_0_phase = 0.
      self.fcal_1_phase = 0.
      self.fcal_0_tilt = 0.
      self.fcal_1_tilt = 0.
      self.unlock_count = 0
      self.hw_version = 0
      self.fcal_0_curve = 0.
      self.fcal_1_curve = 0.
      self.accel_dir_x = 0.
      self.accel_dir_y = 0.
      self.accel_dir_z = 0.
      self.fcal_0_gibphase = 0.
      self.fcal_1_gibphase = 0.
      self.fcal_0_gibmag = 0.
      self.fcal_1_gibmag = 0.
      self.mode = 0
      self.faults = 0
      self.crc32 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iHI4f2B9f2BI().pack(_x.lighthouse, _x.fw_version, _x.ID, _x.fcal_0_phase, _x.fcal_1_phase, _x.fcal_0_tilt, _x.fcal_1_tilt, _x.unlock_count, _x.hw_version, _x.fcal_0_curve, _x.fcal_1_curve, _x.accel_dir_x, _x.accel_dir_y, _x.accel_dir_z, _x.fcal_0_gibphase, _x.fcal_1_gibphase, _x.fcal_0_gibmag, _x.fcal_1_gibmag, _x.mode, _x.faults, _x.crc32))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 70
      (_x.lighthouse, _x.fw_version, _x.ID, _x.fcal_0_phase, _x.fcal_1_phase, _x.fcal_0_tilt, _x.fcal_1_tilt, _x.unlock_count, _x.hw_version, _x.fcal_0_curve, _x.fcal_1_curve, _x.accel_dir_x, _x.accel_dir_y, _x.accel_dir_z, _x.fcal_0_gibphase, _x.fcal_1_gibphase, _x.fcal_0_gibmag, _x.fcal_1_gibmag, _x.mode, _x.faults, _x.crc32,) = _get_struct_iHI4f2B9f2BI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iHI4f2B9f2BI().pack(_x.lighthouse, _x.fw_version, _x.ID, _x.fcal_0_phase, _x.fcal_1_phase, _x.fcal_0_tilt, _x.fcal_1_tilt, _x.unlock_count, _x.hw_version, _x.fcal_0_curve, _x.fcal_1_curve, _x.accel_dir_x, _x.accel_dir_y, _x.accel_dir_z, _x.fcal_0_gibphase, _x.fcal_1_gibphase, _x.fcal_0_gibmag, _x.fcal_1_gibmag, _x.mode, _x.faults, _x.crc32))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 70
      (_x.lighthouse, _x.fw_version, _x.ID, _x.fcal_0_phase, _x.fcal_1_phase, _x.fcal_0_tilt, _x.fcal_1_tilt, _x.unlock_count, _x.hw_version, _x.fcal_0_curve, _x.fcal_1_curve, _x.accel_dir_x, _x.accel_dir_y, _x.accel_dir_z, _x.fcal_0_gibphase, _x.fcal_1_gibphase, _x.fcal_0_gibmag, _x.fcal_1_gibmag, _x.mode, _x.faults, _x.crc32,) = _get_struct_iHI4f2B9f2BI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iHI4f2B9f2BI = None
def _get_struct_iHI4f2B9f2BI():
    global _struct_iHI4f2B9f2BI
    if _struct_iHI4f2B9f2BI is None:
        _struct_iHI4f2B9f2BI = struct.Struct("<iHI4f2B9f2BI")
    return _struct_iHI4f2B9f2BI
