# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/MotorRecord.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorRecord(genpy.Message):
  _md5sum = "fdc40ac028fa6d92b5ce4d22fd304528"
  _type = "roboy_communication_middleware/MotorRecord"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 id
float32 recordTime
int32 samplingTime
uint8 control_mode
int32[] motor0
int32[] motor1
int32[] motor2
int32[] motor3
int32[] motor4
int32[] motor5
int32[] motor6
int32[] motor7
int32[] motor8
int32[] motor9
int32[] motor10
int32[] motor11
int32[] motor12
int32[] motor13"""
  __slots__ = ['id','recordTime','samplingTime','control_mode','motor0','motor1','motor2','motor3','motor4','motor5','motor6','motor7','motor8','motor9','motor10','motor11','motor12','motor13']
  _slot_types = ['uint8','float32','int32','uint8','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,recordTime,samplingTime,control_mode,motor0,motor1,motor2,motor3,motor4,motor5,motor6,motor7,motor8,motor9,motor10,motor11,motor12,motor13

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorRecord, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.recordTime is None:
        self.recordTime = 0.
      if self.samplingTime is None:
        self.samplingTime = 0
      if self.control_mode is None:
        self.control_mode = 0
      if self.motor0 is None:
        self.motor0 = []
      if self.motor1 is None:
        self.motor1 = []
      if self.motor2 is None:
        self.motor2 = []
      if self.motor3 is None:
        self.motor3 = []
      if self.motor4 is None:
        self.motor4 = []
      if self.motor5 is None:
        self.motor5 = []
      if self.motor6 is None:
        self.motor6 = []
      if self.motor7 is None:
        self.motor7 = []
      if self.motor8 is None:
        self.motor8 = []
      if self.motor9 is None:
        self.motor9 = []
      if self.motor10 is None:
        self.motor10 = []
      if self.motor11 is None:
        self.motor11 = []
      if self.motor12 is None:
        self.motor12 = []
      if self.motor13 is None:
        self.motor13 = []
    else:
      self.id = 0
      self.recordTime = 0.
      self.samplingTime = 0
      self.control_mode = 0
      self.motor0 = []
      self.motor1 = []
      self.motor2 = []
      self.motor3 = []
      self.motor4 = []
      self.motor5 = []
      self.motor6 = []
      self.motor7 = []
      self.motor8 = []
      self.motor9 = []
      self.motor10 = []
      self.motor11 = []
      self.motor12 = []
      self.motor13 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BfiB().pack(_x.id, _x.recordTime, _x.samplingTime, _x.control_mode))
      length = len(self.motor0)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor0))
      length = len(self.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor1))
      length = len(self.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor2))
      length = len(self.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor3))
      length = len(self.motor4)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor4))
      length = len(self.motor5)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor5))
      length = len(self.motor6)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor6))
      length = len(self.motor7)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor7))
      length = len(self.motor8)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor8))
      length = len(self.motor9)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor9))
      length = len(self.motor10)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor10))
      length = len(self.motor11)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor11))
      length = len(self.motor12)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor12))
      length = len(self.motor13)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.motor13))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.id, _x.recordTime, _x.samplingTime, _x.control_mode,) = _get_struct_BfiB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor0 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor3 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor4 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor5 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor6 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor7 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor8 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor9 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor10 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor11 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor12 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor13 = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BfiB().pack(_x.id, _x.recordTime, _x.samplingTime, _x.control_mode))
      length = len(self.motor0)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor0.tostring())
      length = len(self.motor1)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor1.tostring())
      length = len(self.motor2)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor2.tostring())
      length = len(self.motor3)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor3.tostring())
      length = len(self.motor4)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor4.tostring())
      length = len(self.motor5)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor5.tostring())
      length = len(self.motor6)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor6.tostring())
      length = len(self.motor7)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor7.tostring())
      length = len(self.motor8)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor8.tostring())
      length = len(self.motor9)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor9.tostring())
      length = len(self.motor10)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor10.tostring())
      length = len(self.motor11)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor11.tostring())
      length = len(self.motor12)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor12.tostring())
      length = len(self.motor13)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.motor13.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.id, _x.recordTime, _x.samplingTime, _x.control_mode,) = _get_struct_BfiB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor0 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor1 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor2 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor3 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor4 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor5 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor6 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor7 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor8 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor9 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor10 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor11 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor12 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor13 = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BfiB = None
def _get_struct_BfiB():
    global _struct_BfiB
    if _struct_BfiB is None:
        _struct_BfiB = struct.Struct("<BfiB")
    return _struct_BfiB
