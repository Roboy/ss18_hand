# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/MotorCalibrationServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorCalibrationServiceRequest(genpy.Message):
  _md5sum = "9f4930777a486870f541f84373cd36ea"
  _type = "roboy_communication_middleware/MotorCalibrationServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 fpga
int32 motor
int32 degree
int32 timeout
int32 numberOfDataPoints
int32 displacement_min
int32 displacement_max
"""
  __slots__ = ['fpga','motor','degree','timeout','numberOfDataPoints','displacement_min','displacement_max']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fpga,motor,degree,timeout,numberOfDataPoints,displacement_min,displacement_max

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorCalibrationServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fpga is None:
        self.fpga = 0
      if self.motor is None:
        self.motor = 0
      if self.degree is None:
        self.degree = 0
      if self.timeout is None:
        self.timeout = 0
      if self.numberOfDataPoints is None:
        self.numberOfDataPoints = 0
      if self.displacement_min is None:
        self.displacement_min = 0
      if self.displacement_max is None:
        self.displacement_max = 0
    else:
      self.fpga = 0
      self.motor = 0
      self.degree = 0
      self.timeout = 0
      self.numberOfDataPoints = 0
      self.displacement_min = 0
      self.displacement_max = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.fpga, _x.motor, _x.degree, _x.timeout, _x.numberOfDataPoints, _x.displacement_min, _x.displacement_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.fpga, _x.motor, _x.degree, _x.timeout, _x.numberOfDataPoints, _x.displacement_min, _x.displacement_max,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.fpga, _x.motor, _x.degree, _x.timeout, _x.numberOfDataPoints, _x.displacement_min, _x.displacement_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.fpga, _x.motor, _x.degree, _x.timeout, _x.numberOfDataPoints, _x.displacement_min, _x.displacement_max,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/MotorCalibrationServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorCalibrationServiceResponse(genpy.Message):
  _md5sum = "cbaac264566b037dc730e8ef15ebdc8f"
  _type = "roboy_communication_middleware/MotorCalibrationServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] estimated_spring_parameters
float64[] load
float64[] displacement

"""
  __slots__ = ['estimated_spring_parameters','load','displacement']
  _slot_types = ['float32[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       estimated_spring_parameters,load,displacement

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorCalibrationServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.estimated_spring_parameters is None:
        self.estimated_spring_parameters = []
      if self.load is None:
        self.load = []
      if self.displacement is None:
        self.displacement = []
    else:
      self.estimated_spring_parameters = []
      self.load = []
      self.displacement = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.estimated_spring_parameters)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.estimated_spring_parameters))
      length = len(self.load)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.load))
      length = len(self.displacement)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.displacement))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.estimated_spring_parameters = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.load = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.displacement = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.estimated_spring_parameters)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.estimated_spring_parameters.tostring())
      length = len(self.load)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.load.tostring())
      length = len(self.displacement)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.displacement.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.estimated_spring_parameters = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.load = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.displacement = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class MotorCalibrationService(object):
  _type          = 'roboy_communication_middleware/MotorCalibrationService'
  _md5sum = '78e9593b5280af42e349c156e06528a2'
  _request_class  = MotorCalibrationServiceRequest
  _response_class = MotorCalibrationServiceResponse
