# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/EmergencyStopRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EmergencyStopRequest(genpy.Message):
  _md5sum = "5cb1723ff4e2dcbaf97dce0e23422c02"
  _type = "roboy_communication_middleware/EmergencyStopRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool all
int8[] idList
"""
  __slots__ = ['all','idList']
  _slot_types = ['bool','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       all,idList

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EmergencyStopRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.all is None:
        self.all = False
      if self.idList is None:
        self.idList = []
    else:
      self.all = False
      self.idList = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.all))
      length = len(self.idList)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.idList))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.all,) = _get_struct_B().unpack(str[start:end])
      self.all = bool(self.all)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.idList = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.all))
      length = len(self.idList)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.idList.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.all,) = _get_struct_B().unpack(str[start:end])
      self.all = bool(self.all)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.idList = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/EmergencyStopResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import roboy_communication_middleware.msg

class EmergencyStopResponse(genpy.Message):
  _md5sum = "1860ce0365aa3b59242b46bb77db6c62"
  _type = "roboy_communication_middleware/EmergencyStopResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ControllerState[] states


================================================================================
MSG: roboy_communication_middleware/ControllerState
int32 id
int8 state

"""
  __slots__ = ['states']
  _slot_types = ['roboy_communication_middleware/ControllerState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EmergencyStopResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.states is None:
        self.states = []
    else:
      self.states = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.states)
      buff.write(_struct_I.pack(length))
      for val1 in self.states:
        _x = val1
        buff.write(_get_struct_ib().pack(_x.id, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.states is None:
        self.states = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.states = []
      for i in range(0, length):
        val1 = roboy_communication_middleware.msg.ControllerState()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.state,) = _get_struct_ib().unpack(str[start:end])
        self.states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.states)
      buff.write(_struct_I.pack(length))
      for val1 in self.states:
        _x = val1
        buff.write(_get_struct_ib().pack(_x.id, _x.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.states is None:
        self.states = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.states = []
      for i in range(0, length):
        val1 = roboy_communication_middleware.msg.ControllerState()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.state,) = _get_struct_ib().unpack(str[start:end])
        self.states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_ib = None
def _get_struct_ib():
    global _struct_ib
    if _struct_ib is None:
        _struct_ib = struct.Struct("<ib")
    return _struct_ib
class EmergencyStop(object):
  _type          = 'roboy_communication_middleware/EmergencyStop'
  _md5sum = 'a9d4ee2f1bc63fdf0054100392ba922e'
  _request_class  = EmergencyStopRequest
  _response_class = EmergencyStopResponse
