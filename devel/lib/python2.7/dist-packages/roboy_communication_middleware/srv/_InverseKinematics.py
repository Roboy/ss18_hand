# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/InverseKinematicsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class InverseKinematicsRequest(genpy.Message):
  _md5sum = "198b67e76bcb5cc0558b3fa4f24b2bc2"
  _type = "roboy_communication_middleware/InverseKinematicsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Vector3 targetPosition

geometry_msgs/Vector3 ankle_left

geometry_msgs/Vector3 ankle_right_sensor


int32 lighthouse_sensor_id

float64[] initial_angles

bool inspect
bool visualize_initial
bool visualize_result

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['targetPosition','ankle_left','ankle_right_sensor','lighthouse_sensor_id','initial_angles','inspect','visualize_initial','visualize_result']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','int32','float64[]','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       targetPosition,ankle_left,ankle_right_sensor,lighthouse_sensor_id,initial_angles,inspect,visualize_initial,visualize_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InverseKinematicsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.targetPosition is None:
        self.targetPosition = geometry_msgs.msg.Vector3()
      if self.ankle_left is None:
        self.ankle_left = geometry_msgs.msg.Vector3()
      if self.ankle_right_sensor is None:
        self.ankle_right_sensor = geometry_msgs.msg.Vector3()
      if self.lighthouse_sensor_id is None:
        self.lighthouse_sensor_id = 0
      if self.initial_angles is None:
        self.initial_angles = []
      if self.inspect is None:
        self.inspect = False
      if self.visualize_initial is None:
        self.visualize_initial = False
      if self.visualize_result is None:
        self.visualize_result = False
    else:
      self.targetPosition = geometry_msgs.msg.Vector3()
      self.ankle_left = geometry_msgs.msg.Vector3()
      self.ankle_right_sensor = geometry_msgs.msg.Vector3()
      self.lighthouse_sensor_id = 0
      self.initial_angles = []
      self.inspect = False
      self.visualize_initial = False
      self.visualize_result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9di().pack(_x.targetPosition.x, _x.targetPosition.y, _x.targetPosition.z, _x.ankle_left.x, _x.ankle_left.y, _x.ankle_left.z, _x.ankle_right_sensor.x, _x.ankle_right_sensor.y, _x.ankle_right_sensor.z, _x.lighthouse_sensor_id))
      length = len(self.initial_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.initial_angles))
      _x = self
      buff.write(_get_struct_3B().pack(_x.inspect, _x.visualize_initial, _x.visualize_result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.targetPosition is None:
        self.targetPosition = geometry_msgs.msg.Vector3()
      if self.ankle_left is None:
        self.ankle_left = geometry_msgs.msg.Vector3()
      if self.ankle_right_sensor is None:
        self.ankle_right_sensor = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.targetPosition.x, _x.targetPosition.y, _x.targetPosition.z, _x.ankle_left.x, _x.ankle_left.y, _x.ankle_left.z, _x.ankle_right_sensor.x, _x.ankle_right_sensor.y, _x.ankle_right_sensor.z, _x.lighthouse_sensor_id,) = _get_struct_9di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.initial_angles = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 3
      (_x.inspect, _x.visualize_initial, _x.visualize_result,) = _get_struct_3B().unpack(str[start:end])
      self.inspect = bool(self.inspect)
      self.visualize_initial = bool(self.visualize_initial)
      self.visualize_result = bool(self.visualize_result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9di().pack(_x.targetPosition.x, _x.targetPosition.y, _x.targetPosition.z, _x.ankle_left.x, _x.ankle_left.y, _x.ankle_left.z, _x.ankle_right_sensor.x, _x.ankle_right_sensor.y, _x.ankle_right_sensor.z, _x.lighthouse_sensor_id))
      length = len(self.initial_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.initial_angles.tostring())
      _x = self
      buff.write(_get_struct_3B().pack(_x.inspect, _x.visualize_initial, _x.visualize_result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.targetPosition is None:
        self.targetPosition = geometry_msgs.msg.Vector3()
      if self.ankle_left is None:
        self.ankle_left = geometry_msgs.msg.Vector3()
      if self.ankle_right_sensor is None:
        self.ankle_right_sensor = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.targetPosition.x, _x.targetPosition.y, _x.targetPosition.z, _x.ankle_left.x, _x.ankle_left.y, _x.ankle_left.z, _x.ankle_right_sensor.x, _x.ankle_right_sensor.y, _x.ankle_right_sensor.z, _x.lighthouse_sensor_id,) = _get_struct_9di().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.initial_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 3
      (_x.inspect, _x.visualize_initial, _x.visualize_result,) = _get_struct_3B().unpack(str[start:end])
      self.inspect = bool(self.inspect)
      self.visualize_initial = bool(self.visualize_initial)
      self.visualize_result = bool(self.visualize_result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_9di = None
def _get_struct_9di():
    global _struct_9di
    if _struct_9di is None:
        _struct_9di = struct.Struct("<9di")
    return _struct_9di
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/InverseKinematicsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class InverseKinematicsResponse(genpy.Message):
  _md5sum = "a673a2632a816934d2c55de3a9c1d219"
  _type = "roboy_communication_middleware/InverseKinematicsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float64[] angles

geometry_msgs/Vector3[] resultPosition

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['angles','resultPosition']
  _slot_types = ['float64[]','geometry_msgs/Vector3[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       angles,resultPosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InverseKinematicsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.angles is None:
        self.angles = []
      if self.resultPosition is None:
        self.resultPosition = []
    else:
      self.angles = []
      self.resultPosition = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.angles))
      length = len(self.resultPosition)
      buff.write(_struct_I.pack(length))
      for val1 in self.resultPosition:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.resultPosition is None:
        self.resultPosition = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.angles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.resultPosition = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.resultPosition.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.angles.tostring())
      length = len(self.resultPosition)
      buff.write(_struct_I.pack(length))
      for val1 in self.resultPosition:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.resultPosition is None:
        self.resultPosition = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.resultPosition = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.resultPosition.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class InverseKinematics(object):
  _type          = 'roboy_communication_middleware/InverseKinematics'
  _md5sum = '7ed4cab343a38215cfd78eb6ab4e3999'
  _request_class  = InverseKinematicsRequest
  _response_class = InverseKinematicsResponse
