# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/RecordRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import roboy_communication_middleware.msg

class RecordRequest(genpy.Message):
  _md5sum = "07d47afdfb09665ab08eab198db875ce"
  _type = "roboy_communication_middleware/RecordRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ControllerRequest[] controllers
float32 sampleRate

================================================================================
MSG: roboy_communication_middleware/ControllerRequest
int32    id
uint32   controlmode"""
  __slots__ = ['controllers','sampleRate']
  _slot_types = ['roboy_communication_middleware/ControllerRequest[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controllers,sampleRate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecordRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.controllers is None:
        self.controllers = []
      if self.sampleRate is None:
        self.sampleRate = 0.
    else:
      self.controllers = []
      self.sampleRate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.controllers)
      buff.write(_struct_I.pack(length))
      for val1 in self.controllers:
        _x = val1
        buff.write(_get_struct_iI().pack(_x.id, _x.controlmode))
      buff.write(_get_struct_f().pack(self.sampleRate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.controllers is None:
        self.controllers = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controllers = []
      for i in range(0, length):
        val1 = roboy_communication_middleware.msg.ControllerRequest()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.controlmode,) = _get_struct_iI().unpack(str[start:end])
        self.controllers.append(val1)
      start = end
      end += 4
      (self.sampleRate,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.controllers)
      buff.write(_struct_I.pack(length))
      for val1 in self.controllers:
        _x = val1
        buff.write(_get_struct_iI().pack(_x.id, _x.controlmode))
      buff.write(_get_struct_f().pack(self.sampleRate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.controllers is None:
        self.controllers = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controllers = []
      for i in range(0, length):
        val1 = roboy_communication_middleware.msg.ControllerRequest()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.controlmode,) = _get_struct_iI().unpack(str[start:end])
        self.controllers.append(val1)
      start = end
      end += 4
      (self.sampleRate,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iI = None
def _get_struct_iI():
    global _struct_iI
    if _struct_iI is None:
        _struct_iI = struct.Struct("<iI")
    return _struct_iI
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboy_communication_middleware/RecordResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import roboy_communication_middleware.msg

class RecordResponse(genpy.Message):
  _md5sum = "5e4ac1689a0e39ee0a973eb31bd5b636"
  _type = "roboy_communication_middleware/RecordResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Trajectory[] trajectories

================================================================================
MSG: roboy_communication_middleware/Trajectory
uint32 id
float32 samplerate
float32[] waypoints

"""
  __slots__ = ['trajectories']
  _slot_types = ['roboy_communication_middleware/Trajectory[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectories

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RecordResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectories is None:
        self.trajectories = []
    else:
      self.trajectories = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories:
        _x = val1
        buff.write(_get_struct_If().pack(_x.id, _x.samplerate))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.waypoints))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectories is None:
        self.trajectories = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories = []
      for i in range(0, length):
        val1 = roboy_communication_middleware.msg.Trajectory()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.samplerate,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.waypoints = struct.unpack(pattern, str[start:end])
        self.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories:
        _x = val1
        buff.write(_get_struct_If().pack(_x.id, _x.samplerate))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.waypoints.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectories is None:
        self.trajectories = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories = []
      for i in range(0, length):
        val1 = roboy_communication_middleware.msg.Trajectory()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.samplerate,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.waypoints = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
class Record(object):
  _type          = 'roboy_communication_middleware/Record'
  _md5sum = '8246afadbae0b4cfcc4b33aa0dfa16f2'
  _request_class  = RecordRequest
  _response_class = RecordResponse
